!function(t,a){"object"==typeof exports&&"undefined"!=typeof module?a(exports,require("@angular/forms"),require("@angular/common"),require("@angular/platform-browser"),require("@angular/core")):"function"==typeof define&&define.amd?define("snowboard-setup-simulator",["exports","@angular/forms","@angular/common","@angular/platform-browser","@angular/core"],a):a(t["snowboard-setup-simulator"]={},t.ng.forms,t.ng.common,t.ng.platformBrowser,t.ng.core)}(this,function(t,a,n,e,o){"use strict";var r=function(){function t(){}return t.decorators=[{type:o.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[]},t.ngInjectableDef=o.defineInjectable({factory:function(){return new t},token:t,providedIn:"root"}),t}(),i=function(){function t(){}return t.prototype.ngOnInit=function(){},t.decorators=[{type:o.Component,args:[{selector:"lib-snowboard-setup-simulator",template:"\n    <app-board-panel></app-board-panel>\n  "}]}],t.ctorParameters=function(){return[]},t}(),s=function(){function t(){this.cmInPixelFactor=2,this.inchesInCm=2.54,this.mInPixelFactor=200}return t.prototype.ngOnInit=function(){},t.prototype.ngDoCheck=function(){this.boardData&&(this.calculateRightOverhang(),this.calculateLeftOverhang())},t.prototype.getContainerHeight=function(){return $(".board-container")?$(".board-container").height()-2:0},t.prototype.getSidecutMargin=function(){return this.boardData.sidecutInM<6.3?-2:this.boardData.sidecutInM<6.7?-1:this.boardData.sidecutInM<7.2?0:this.boardData.sidecutInM<7.6?1:this.boardData.sidecutInM<8.5?2:this.boardData.sidecutInM<9?3:this.boardData.sidecutInM<9.4?4:this.boardData.sidecutInM<=10?5:6},t.prototype.calculateRightOverhang=function(){var t=this.calculateWidthAtInserts(this.boardData.stance/2+2.54*this.boardData.setBackInInches-2.54*this.boardData.sidecutSetbackInInches),a=this.calculateAbsBoardWidthAtInserts(this.boardData.rightAngle,t),n=this.calculateAbsBoardWidthAtInserts(this.boardData.rightAngle,1);this.currentRightHeelOverhang=Math.floor(100*((this.boardData.bootSize-a)/2-this.boardData.bindingOffsetRight*n))/100,this.currentRightToeOverhang=Math.floor(100*((this.boardData.bootSize-a)/2+this.boardData.bindingOffsetRight*n))/100},t.prototype.calculateLeftOverhang=function(){var t=this.calculateWidthAtInserts(this.boardData.stance/2-2.54*this.boardData.setBackInInches+2.54*this.boardData.sidecutSetbackInInches),a=this.calculateAbsBoardWidthAtInserts(this.boardData.leftAngle,t),n=this.calculateAbsBoardWidthAtInserts(this.boardData.leftAngle,1);this.currentLeftToeOverhang=Math.floor(100*((this.boardData.bootSize-a)/2+this.boardData.bindingOffsetLeft*n))/100,this.currentLeftHeelOverhang=Math.floor(100*((this.boardData.bootSize-a)/2-this.boardData.bindingOffsetLeft*n))/100},t.prototype.calculateWidthAtInserts=function(t){var a=100*this.boardData.sidecutInM,n=t,e=Math.pow(a,2)-Math.pow(n,2),o=Math.sqrt(e);return this.boardData.waist+2*(a-o)},t.prototype.calculateAbsBoardWidthAtInserts=function(t,a){var n,e;return 0===(e=0<=t?t:-t)||0===a?a:(n=90-e,a*Math.sin(90*Math.PI/180)/Math.sin(n*Math.PI/180))},t.decorators=[{type:o.Component,args:[{selector:"app-board",template:'<div *ngIf="boardData">\n  <app-overhang-panel [boardData]="boardData" [placement]="\'top\'" [leftOverhang]="currentLeftToeOverhang" [rightOverhang]="currentRightToeOverhang"></app-overhang-panel>\n  <div class="board"  [style.width.px]="boardData.length * cmInPixelFactor + 6">\n    <div class="binding--right" [style.right.px]="boardData.length + 6 - (cmInPixelFactor + boardData.stance + boardData.setBackInInches * inchesInCm * cmInPixelFactor )">\n      <app-binding [angle]="boardData.rightAngle" [bootSize]="boardData.bootSize" [boardWidth]="boardData.waist * cmInPixelFactor + boardData.sidecutInM" [bindingOffset]="boardData.bindingOffsetRight"></app-binding>\n    </div>\n    <div class="binding--left" [style.left.px]="boardData.length + 6 - boardData.stance + boardData.setBackInInches * inchesInCm * cmInPixelFactor">\n      <app-binding [angle]="boardData.leftAngle" [bootSize]="boardData.bootSize" [boardWidth]="boardData.waist * cmInPixelFactor + boardData.sidecutInM" [bindingOffset]="boardData.bindingOffsetLeft"></app-binding>\n    </div>\n    <div class="board-container" [style.width.px]="boardData.length * cmInPixelFactor + 6" [style.height.px]="boardData.waist * cmInPixelFactor + boardData.sidecutInM" #boardContainer>\n      <div class="board-boarder" [style.width.px]="boardData.length * cmInPixelFactor + 6" [style.height.px]="boardData.waist * cmInPixelFactor + boardData.sidecutInM">\n        <div class="sidecut sidecut-top"\n             [style.width.px]="boardData.sidecutInM * mInPixelFactor * 2"\n             [style.height.px]="boardData.sidecutInM * mInPixelFactor * 2"\n             [style.margin-left.px]=" - boardData.sidecutInM * 200 + cmInPixelFactor + boardData.length + boardData.sidecutSetbackInInches * inchesInCm"\n             [style.margin-top.px]="-boardData.sidecutInM * mInPixelFactor * 2 + getContainerHeight() - boardData.waist * cmInPixelFactor - getSidecutMargin()"\n        ></div>\n        <div class="waist" [style.right.px]="boardData.length - boardData.sidecutSetbackInInches * inchesInCm * cmInPixelFactor"></div>\n        <div class="sidecut sidecut-bot"\n             [style.width.px]="boardData.sidecutInM * mInPixelFactor * 2"\n             [style.height.px]="boardData.sidecutInM * mInPixelFactor * 2"\n             [style.margin-left.px]=" - boardData.sidecutInM * 200 + cmInPixelFactor + boardData.length + boardData.sidecutSetbackInInches * inchesInCm"\n             [style.margin-top.px]="boardData.waist * cmInPixelFactor + getSidecutMargin()"></div>\n      </div>\n    </div>\n  </div>\n  <app-overhang-panel [boardData]="boardData" [placement]="\'bot\'" [leftOverhang]="currentLeftHeelOverhang" [rightOverhang]="currentRightHeelOverhang"></app-overhang-panel>\n</div>\n',styles:[".board-container{position:relative;overflow:hidden;margin:0 auto}.board-boarder{border-radius:50px;border:1px solid #000;position:relative}.board{position:relative;margin:0 auto}.sidecut{position:absolute;border:1px solid #000;border-radius:100%;z-index:5;background:#fff;margin:0 auto}.waist{min-width:0;min-height:100%;z-index:8;position:absolute;border:1px dashed #000}.binding--left,.binding--right{position:absolute}"]}]}],t.ctorParameters=function(){return[]},t.propDecorators={boardData:[{type:o.Input}]},t}(),d=function h(){},l=function(){function t(){this.boardData=new d,this.boardData.length=155,this.boardData.waist=25.5,this.boardData.sidecutInM=7.6,this.boardData.sidecutSetbackInInches=0,this.boardData.stance=53,this.boardData.leftAngle=15,this.boardData.rightAngle=-6,this.boardData.bootSize=30.5,this.boardData.bindingOffsetLeft=0,this.boardData.bindingOffsetRight=0,this.boardData.setBackInInches=1}return t.prototype.ngOnInit=function(){},t.decorators=[{type:o.Component,args:[{selector:"app-board-panel",template:'<div class="main">\n  <div class="panel__bd board">\n    <app-board [boardData]="boardData"></app-board>\n  </div>\n  <app-data-input-form [boardData]="boardData"></app-data-input-form>\n</div>\n',styles:[".board{min-height:80px;margin:0 auto}.main{width:100%;min-width:300px;margin-bottom:5rem}"]}]}],t.ctorParameters=function(){return[]},t}(),c=function(){function t(){}return t.prototype.ngOnInit=function(){},t.prototype.ngOnChanges=function(t){},t.decorators=[{type:o.Component,args:[{selector:"app-binding",template:'<div class="binding" [style.transform]="\'rotate(\' + (360 - angle) + \'deg)\'" [style.height.px]="bootSize * 2"\n     [style.width.px]="bootSize/5 * 4" [style.margin-left.px]="-bootSize/5 * 2" [style.margin-top.px]="(boardWidth - bootSize *2)/2  - bindingOffset*2">\n  <div class="footbed" [style.width.px]="bootSize/5 * 4 -2" [style.height.px]="bootSize * 1.25" [style.margin-top.px]="bootSize/5 * 1.7">\n    /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\<br>\n    /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\<br>\n    /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\<br>\n    /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\<br>\n    /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\<br>\n    /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\<br>\n    /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\<br>\n    /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\<br>\n    /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\<br>\n    /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\<br>\n    /\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\<br>\n  </div>\n</div>\n',styles:[".binding{border-radius:40% 40% 38% 38%;border:1px solid #000;border-bottom:5px solid #000;border-top:2px solid #000;position:absolute;overflow:hidden;z-index:10;margin-top:0}.footbed{text-align:center;overflow:hidden;font-size:.6rem;background-color:gray}"]}]}],t.ctorParameters=function(){return[]},t.propDecorators={angle:[{type:o.Input}],bootSize:[{type:o.Input}],boardWidth:[{type:o.Input}],bindingOffset:[{type:o.Input}]},t}(),b=function(){function t(){}return t.prototype.ngOnInit=function(){},t.prototype.getWarningLevel=function(t){return t<1.75?"#03d800":t<2?"#94ec00":t<2.25?"#dddd00":t<2.5?"#ed8649":"#da0000"},t.prototype.getWarningWidth=function(t){return t<2?2:t<2.5?3:4},t.decorators=[{type:o.Component,args:[{selector:"app-overhang-panel",template:'<div class="overhang" *ngIf="boardData" [style.width.px]="boardData.length * 2">\n  <span class="overhang-label--{{placement}}" [style.float]="\'left\'" [style.left.px]="boardData.length - (2 + boardData.stance - boardData.setBackInInches *2.54 * 2) - 30">{{leftOverhang}} cm</span>\n  <span class="overhang-label--{{placement}}" [style.float]="\'right\'" [style.right.px]="boardData.length  - (2 + boardData.stance + boardData.setBackInInches *2.54 * 2) - 30">{{rightOverhang}} cm</span>\n  <span *ngIf="leftOverhang >= 1" class="overhang-warning-{{placement}}"\n        [style.border-color]="getWarningLevel(leftOverhang)"\n        [style.border-width.px]="getWarningWidth(leftOverhang)"\n        [style.float]="\'left\'"\n        [style.left.px]="boardData.length - (2 + boardData.stance - boardData.setBackInInches *2.54 * 2) - 25">\n        </span>\n  <span *ngIf="rightOverhang >= 1" class="overhang-warning-{{placement}}"\n        [style.border-color]="getWarningLevel(rightOverhang)"\n        [style.border-width.px]="getWarningWidth(rightOverhang)"\n        [style.float]="\'right\'"\n        [style.right.px]="boardData.length  - (2 + boardData.stance + boardData.setBackInInches *2.54 * 2) - 25">\n        </span>\n  <div class="overhang-{{placement}}-title">\n    <ng-container *ngIf="placement === \'top\'">\n      Toe overhang:\n    </ng-container>\n    <ng-container *ngIf="placement === \'bot\'">\n      Heel overhang:\n    </ng-container>\n  </div>\n</div>\n',styles:[".overhang{position:relative;margin:10px auto;text-align:center}.overhang-label--top{position:absolute;bottom:-2.5rem}.overhang-label--bot{position:absolute;top:-2.5rem}.overhang-top-title{margin-bottom:4rem}.overhang-bot-title{margin-top:4rem}.overhang-warning-top{position:absolute;bottom:-5.2rem;z-index:20;height:1.5rem;width:5rem;border-style:dashed}.overhang-warning-bot{margin-top:-2.7rem;z-index:20;height:1.5rem;width:5rem;border-style:dashed;position:absolute;top:-2.5rem}"]}]}],t.ctorParameters=function(){return[]},t.propDecorators={boardData:[{type:o.Input}],leftOverhang:[{type:o.Input}],rightOverhang:[{type:o.Input}],placement:[{type:o.Input}]},t}(),p=function(){function t(){}return t.prototype.ngOnInit=function(){},t.decorators=[{type:o.Component,args:[{selector:"app-data-input-form",template:'<div class="container-fluid" *ngIf="boardData">\n  <div class="row">\n    <label class="col-xs-8">Length (in cm):</label>\n    <input class="col-xs-3" type="number" [(ngModel)]="boardData.length"  step="3">\n  </div>\n  <div class="row">\n    <label class="col-xs-8">Waist (in cm):</label>\n    <input class="col-xs-3" type="number" [(ngModel)]="boardData.waist" step="0.1">\n  </div>\n  <div class="row">\n    <label class="col-xs-8">Sidecut radius (in m):</label>\n    <input class="col-xs-3" type="number" [(ngModel)]="boardData.sidecutInM" step="0.1" max="10" min="6">\n  </div>\n  <div class="row">\n    <label class="col-xs-8">Sidecut Setback (in inches):</label>\n    <input class="col-xs-3" type="number" [(ngModel)]="boardData.sidecutSetbackInInches" step="0.1">\n  </div>\n  <div class="row">\n    <label class="col-xs-8">Stance Setback (in inches):</label>\n    <input class="col-xs-3" type="number" [(ngModel)]="boardData.setBackInInches"  step="0.1">\n  </div>\n  <div class="row">\n    <label class="col-xs-8">Stance width (in cm):</label>\n    <input class="col-xs-3" type="number" [(ngModel)]="boardData.stance">\n  </div>\n  <div class="row">\n    <label class="col-xs-8">Angle left foot (in °):</label>\n    <input class="col-xs-3" type="number" [(ngModel)]="boardData.leftAngle" step="3">\n  </div>\n  <div class="row">\n    <label class="col-xs-8">Angle right foot (in °):</label>\n    <input class="col-xs-3" type="number" [(ngModel)]="boardData.rightAngle" step="3">\n  </div>\n  <div class="row">\n    <label class="col-xs-8">Boot Profile Size(in cm):</label>\n    <input class="col-xs-3" type="number" [(ngModel)]="boardData.bootSize" step="0.5">\n  </div>\n  <div class="row">\n    <label class="col-xs-8">Binding offset left(in cm):</label>\n    <input class="col-xs-3" type="number" [(ngModel)]="boardData.bindingOffsetLeft" step="0.1">\n  </div>\n  <div class="row">\n    <label class="col-xs-8">Binding offset right(in cm):</label>\n    <input class="col-xs-3" type="number" [(ngModel)]="boardData.bindingOffsetRight" step="0.1">\n  </div>\n</div>\n',styles:[".row{margin-bottom:.5rem;padding-left:3rem;padding-right:3rem}.container-fluid{margin-bottom:3rem}"]}]}],t.ctorParameters=function(){return[]},t.propDecorators={boardData:[{type:o.Input}]},t}(),g=function(){function t(){}return t.decorators=[{type:o.NgModule,args:[{declarations:[s,l,c,b,p,i],imports:[e.BrowserModule,a.FormsModule,n.CommonModule],exports:[i]}]}],t}();t.SnowboardSetupSimulatorService=r,t.SnowboardSetupSimulatorComponent=i,t.SnowboardSetupSimulatorModule=g,t.ɵc=c,t.ɵb=l,t.ɵa=s,t.ɵe=p,t.ɵd=b,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=snowboard-setup-simulator.umd.min.js.map