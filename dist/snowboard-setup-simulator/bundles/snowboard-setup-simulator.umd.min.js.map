{"version":3,"sources":["ng://snowboard-setup-simulator/lib/snowboard-setup-simulator.service.ts","ng://snowboard-setup-simulator/lib/snowboard-setup-simulator.component.ts","ng://snowboard-setup-simulator/lib/board/board.component.ts","ng://snowboard-setup-simulator/lib/classes/board-data-dto.ts","ng://snowboard-setup-simulator/lib/board-panel/board-panel.component.ts","ng://snowboard-setup-simulator/lib/binding/binding.component.ts","ng://snowboard-setup-simulator/lib/overhang-panel/overhang-panel.component.ts","ng://snowboard-setup-simulator/lib/data-input-form/data-input-form.component.ts","ng://snowboard-setup-simulator/lib/snowboard-setup-simulator.module.ts"],"names":["SnowboardSetupSimulatorService","Injectable","args","providedIn","SnowboardSetupSimulatorComponent","prototype","ngOnInit","Component","selector","template","BoardComponent","this","cmInPixelFactor","inchesInCm","mInPixelFactor","ngDoCheck","boardData","calculateRightOverhang","calculateLeftOverhang","getContainerHeight","$","height","getSidecutMargin","sidecutInM","widthAtInsert","calculateWidthAtInserts","stance","setBackInInches","sidecutSetbackInInches","absWidthAtInsert","calculateAbsBoardWidthAtInserts","rightAngle","offset","currentRightHeelOverhang","Math","floor","bootSize","bindingOffsetRight","currentRightToeOverhang","leftAngle","currentLeftToeOverhang","bindingOffsetLeft","currentLeftHeelOverhang","stancePlacement","hypoInCm","kat1","kat2Pow","pow","kat2","sqrt","waist","angleValue","widthAtInserts","alpha","beta","sin","PI","Input","BoardDataDto","BoardPanelComponent","length","BindingComponent","ngOnChanges","changes","OverhangPanelComponent","getWarningLevel","overhang","getWarningWidth","DataInputFormComponent","SnowboardSetupSimulatorModule","NgModule","declarations","imports","BrowserModule","FormsModule","CommonModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SnowboardSetupSimulatorService {\r\n\r\n  constructor() { }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-snowboard-setup-simulator',\r\n  template: `\r\n    <app-board-panel></app-board-panel>\r\n  `,\r\n  styles: []\r\n})\r\nexport class SnowboardSetupSimulatorComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {BoardDataDto} from '../classes/board-data-dto';\r\nimport {DoCheck} from '@angular/core/src/metadata/lifecycle_hooks';\r\n\r\ndeclare function $(element: string);\r\n\r\n@Component({\r\n  selector: 'app-board',\r\n  templateUrl: './board.component.html',\r\n  styleUrls: ['./board.component.css']\r\n})\r\nexport class BoardComponent implements OnInit, DoCheck {\r\n\r\n  @Input()\r\n  public boardData: BoardDataDto;\r\n\r\n  public cmInPixelFactor = 2;\r\n  public inchesInCm = 2.54;\r\n  public mInPixelFactor = 200;\r\n\r\n  public currentRightToeOverhang: number;\r\n  public currentLeftToeOverhang: number;\r\n  public currentRightHeelOverhang: number;\r\n  public currentLeftHeelOverhang: number;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.boardData) {\r\n      this.calculateRightOverhang();\r\n      this.calculateLeftOverhang();\r\n    }\r\n  }\r\n\r\n  public getContainerHeight() {\r\n    // Container height minus border width\r\n    if ($('.board-container')) {\r\n      return $('.board-container').height() - 2;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  public getSidecutMargin() {\r\n    if (this.boardData.sidecutInM < 6.3) {\r\n      return -2;\r\n    }\r\n    if (this.boardData.sidecutInM < 6.7) {\r\n      return -1;\r\n    }\r\n    if (this.boardData.sidecutInM < 7.2) {\r\n      return 0;\r\n    }\r\n    if (this.boardData.sidecutInM < 7.6) {\r\n      return 1;\r\n    }\r\n    if (this.boardData.sidecutInM < 8.5) {\r\n      return 2;\r\n    }\r\n    if (this.boardData.sidecutInM < 9) {\r\n      return 3;\r\n    }\r\n    if (this.boardData.sidecutInM < 9.4) {\r\n      return 4;\r\n    }\r\n    if (this.boardData.sidecutInM <= 10) {\r\n      return 5;\r\n    }\r\n    return 6;\r\n  }\r\n\r\n  private calculateRightOverhang() {\r\n    const widthAtInsert = this.calculateWidthAtInserts(this.boardData.stance / 2 + this.boardData.setBackInInches * 2.54 - this.boardData.sidecutSetbackInInches * 2.54);\r\n    const absWidthAtInsert = this.calculateAbsBoardWidthAtInserts(this.boardData.rightAngle, widthAtInsert);\r\n    const offset = this.calculateAbsBoardWidthAtInserts(this.boardData.rightAngle, 1);\r\n    this.currentRightHeelOverhang = Math.floor(((this.boardData.bootSize - absWidthAtInsert) / 2 - this.boardData.bindingOffsetRight * offset) * 100) / 100;\r\n    this.currentRightToeOverhang = Math.floor(((this.boardData.bootSize - absWidthAtInsert) / 2 + this.boardData.bindingOffsetRight * offset) * 100) / 100;\r\n  }\r\n\r\n  private calculateLeftOverhang() {\r\n    const widthAtInsert = this.calculateWidthAtInserts(this.boardData.stance / 2 - this.boardData.setBackInInches * 2.54 + this.boardData.sidecutSetbackInInches * 2.54);\r\n    const absWidthAtInsert = this.calculateAbsBoardWidthAtInserts(this.boardData.leftAngle, widthAtInsert);\r\n    const offset = this.calculateAbsBoardWidthAtInserts(this.boardData.leftAngle, 1);\r\n    this.currentLeftToeOverhang = Math.floor(((this.boardData.bootSize - absWidthAtInsert) / 2 + this.boardData.bindingOffsetLeft * offset) * 100) / 100;\r\n    this.currentLeftHeelOverhang = Math.floor(((this.boardData.bootSize - absWidthAtInsert) / 2 - this.boardData.bindingOffsetLeft * offset) * 100) / 100;\r\n  }\r\n\r\n  private calculateWidthAtInserts(stancePlacement) {\r\n    const hypoInCm = this.boardData.sidecutInM * 100;\r\n    const kat1 = stancePlacement;\r\n    const hypoPow = Math.pow(hypoInCm, 2);\r\n    const kat1Pow = Math.pow(kat1, 2);\r\n    const kat2Pow = hypoPow - kat1Pow;\r\n    const kat2 = Math.sqrt(kat2Pow);\r\n    return this.boardData.waist + (hypoInCm - kat2) * 2;\r\n  }\r\n\r\n  private calculateAbsBoardWidthAtInserts(angleValue: number, widthAtInserts: number) {\r\n    /**\r\n     * right triangle with\r\n     * a = widthAtInserts\r\n     * angle a/b = 90Â°\r\n     * angle a/c = angleValue\r\n     */\r\n    let alpha;\r\n    let beta;\r\n    const gamma = 90;\r\n    if (angleValue >= 0) {\r\n      beta = angleValue;\r\n    } else {\r\n      beta = -angleValue;\r\n    }\r\n    const a = widthAtInserts;\r\n    if (beta === 0 || a === 0) {\r\n      return a;\r\n    } else {\r\n      alpha = 90 - beta;\r\n    }\r\n    const c = a * Math.sin(gamma * Math.PI / 180) / Math.sin(alpha * Math.PI / 180);\r\n    return c;\r\n  }\r\n}\r\n","export class BoardDataDto {\r\n  public length: number;\r\n  public waist: number;\r\n  public sidecutInM: number;\r\n  public sidecutSetbackInInches: number;\r\n  public stance: number;\r\n  public rightAngle: number;\r\n  public leftAngle: number;\r\n  public bootSize: number;\r\n  public bindingOffsetRight: number;\r\n  public bindingOffsetLeft: number;\r\n  public setBackInInches: number;\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {BoardDataDto} from '../classes/board-data-dto';\r\n\r\n@Component({\r\n  selector: 'app-board-panel',\r\n  templateUrl: './board-panel.component.html',\r\n  styleUrls: ['./board-panel.component.css']\r\n})\r\nexport class BoardPanelComponent implements OnInit {\r\n\r\n  public boardData: BoardDataDto;\r\n\r\n  constructor() {\r\n    this.boardData = new BoardDataDto();\r\n    this.boardData.length = 155;\r\n    this.boardData.waist = 25.5;\r\n    this.boardData.sidecutInM = 7.6;\r\n    this.boardData.sidecutSetbackInInches = 0;\r\n    this.boardData.stance = 53;\r\n    this.boardData.leftAngle = 15;\r\n    this.boardData.rightAngle = -6;\r\n    this.boardData.bootSize = 30.5;\r\n    this.boardData.bindingOffsetLeft = 0;\r\n    this.boardData.bindingOffsetRight = 0;\r\n    this.boardData.setBackInInches = 1;\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-binding',\r\n  templateUrl: './binding.component.html',\r\n  styleUrls: ['./binding.component.css']\r\n})\r\nexport class BindingComponent implements OnInit, OnChanges {\r\n  @Input()\r\n  public angle: number;\r\n\r\n  @Input()\r\n  public bootSize: number;\r\n\r\n  @Input()\r\n  public boardWidth: number;\r\n\r\n  @Input()\r\n  public bindingOffset: number;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n  }\r\n\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {BoardDataDto} from '../classes/board-data-dto';\r\n\r\n@Component({\r\n  selector: 'app-overhang-panel',\r\n  templateUrl: './overhang-panel.component.html',\r\n  styleUrls: ['./overhang-panel.component.css']\r\n})\r\nexport class OverhangPanelComponent implements OnInit {\r\n\r\n  @Input()\r\n  public boardData: BoardDataDto;\r\n\r\n  @Input()\r\n  public leftOverhang: number;\r\n\r\n  @Input()\r\n  public rightOverhang: number;\r\n\r\n  @Input()\r\n  public placement: string;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public getWarningLevel(overhang: number) {\r\n    if (overhang < 1.75) {\r\n      return '#03d800';\r\n    }\r\n    if (overhang < 2) {\r\n      return '#94ec00';\r\n    }\r\n    if (overhang < 2.25) {\r\n      return '#dddd00';\r\n    }\r\n    if (overhang < 2.5) {\r\n      return '#ed8649';\r\n    }\r\n    return '#da0000';\r\n  }\r\n\r\n  public getWarningWidth(overhang: number) {\r\n    if (overhang < 2) {\r\n      return 2;\r\n    }\r\n    if (overhang < 2.5) {\r\n      return 3;\r\n    }\r\n    return 4;\r\n  }\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {BoardDataDto} from '../classes/board-data-dto';\r\n\r\n@Component({\r\n  selector: 'app-data-input-form',\r\n  templateUrl: './data-input-form.component.html',\r\n  styleUrls: ['./data-input-form.component.css']\r\n})\r\nexport class DataInputFormComponent implements OnInit {\r\n\r\n  @Input()\r\n  public boardData: BoardDataDto;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { SnowboardSetupSimulatorComponent } from './snowboard-setup-simulator.component';\r\nimport {FormsModule} from '@angular/forms';\r\nimport {CommonModule} from '@angular/common';\r\nimport {BrowserModule} from '@angular/platform-browser';\r\nimport {BoardComponent} from './board/board.component';\r\nimport {BoardPanelComponent} from './board-panel/board-panel.component';\r\nimport {BindingComponent} from './binding/binding.component';\r\nimport {OverhangPanelComponent} from './overhang-panel/overhang-panel.component';\r\nimport {DataInputFormComponent} from './data-input-form/data-input-form.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    BoardComponent,\r\n    BoardPanelComponent,\r\n    BindingComponent,\r\n    OverhangPanelComponent,\r\n    DataInputFormComponent,\r\n    SnowboardSetupSimulatorComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    CommonModule\r\n  ],\r\n  exports: [SnowboardSetupSimulatorComponent]\r\n})\r\nexport class SnowboardSetupSimulatorModule { }\r\n"]}