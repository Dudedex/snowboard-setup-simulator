{"version":3,"sources":["ng://snowboard-setup-simulator/lib/snowboard-setup-simulator.service.ts","ng://snowboard-setup-simulator/lib/snowboard-setup-simulator.component.ts","ng://snowboard-setup-simulator/lib/board/board.component.ts","ng://snowboard-setup-simulator/lib/classes/board-data-dto.ts","ng://snowboard-setup-simulator/lib/board-panel/board-panel.component.ts","ng://snowboard-setup-simulator/lib/binding/binding.component.ts","ng://snowboard-setup-simulator/lib/overhang-panel/overhang-panel.component.ts","ng://snowboard-setup-simulator/lib/data-input-form/data-input-form.component.ts","ng://snowboard-setup-simulator/lib/snowboard-setup-simulator.module.ts"],"names":["SnowboardSetupSimulatorService","Injectable","args","providedIn","SnowboardSetupSimulatorComponent","prototype","ngOnInit","Component","selector","template","BoardComponent","this","cmInPixelFactor","inchesInCm","mInPixelFactor","ngDoCheck","boardData","calculateRightOverhang","calculateLeftOverhang","getContainerHeight","$","height","getSidecutMargin","sidecutInM","widthAtInsert","calculateWidthAtInserts","stance","setBackInInches","sidecutSetbackInInches","absWidthAtInsert","calculateAbsBoardWidthAtInserts","rightAngle","offset","currentRightHeelOverhang","Math","floor","bootSize","bindingOffsetRight","currentRightToeOverhang","leftAngle","currentLeftToeOverhang","bindingOffsetLeft","currentLeftHeelOverhang","stancePlacement","hypoInCm","kat1","kat2Pow","pow","kat2","sqrt","waist","angleValue","widthAtInserts","alpha","beta","sin","PI","Input","BoardDataDto","BoardPanelComponent","length","BindingComponent","ngOnChanges","changes","OverhangPanelComponent","getWarningLevel","overhang","getWarningWidth","DataInputFormComponent","SnowboardSetupSimulatorModule","NgModule","declarations","imports","BrowserModule","FormsModule","CommonModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SnowboardSetupSimulatorService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-snowboard-setup-simulator',\n  template: `\n    <app-board-panel></app-board-panel>\n  `,\n  styles: []\n})\nexport class SnowboardSetupSimulatorComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {BoardDataDto} from '../classes/board-data-dto';\nimport {DoCheck} from '@angular/core/src/metadata/lifecycle_hooks';\n\ndeclare function $(element: string);\n\n@Component({\n  selector: 'app-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.css']\n})\nexport class BoardComponent implements OnInit, DoCheck {\n\n  @Input()\n  public boardData: BoardDataDto;\n\n  public cmInPixelFactor = 2;\n  public inchesInCm = 2.54;\n  public mInPixelFactor = 200;\n\n  public currentRightToeOverhang: number;\n  public currentLeftToeOverhang: number;\n  public currentRightHeelOverhang: number;\n  public currentLeftHeelOverhang: number;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n\n  }\n\n  ngDoCheck() {\n    if (this.boardData) {\n      this.calculateRightOverhang();\n      this.calculateLeftOverhang();\n    }\n  }\n\n  public getContainerHeight() {\n    // Container height minus border width\n    if ($('.board-container')) {\n      return $('.board-container').height() - 2;\n    }\n    return 0;\n  }\n\n  public getSidecutMargin() {\n    if (this.boardData.sidecutInM < 6.3) {\n      return -2;\n    }\n    if (this.boardData.sidecutInM < 6.7) {\n      return -1;\n    }\n    if (this.boardData.sidecutInM < 7.2) {\n      return 0;\n    }\n    if (this.boardData.sidecutInM < 7.6) {\n      return 1;\n    }\n    if (this.boardData.sidecutInM < 8.5) {\n      return 2;\n    }\n    if (this.boardData.sidecutInM < 9) {\n      return 3;\n    }\n    if (this.boardData.sidecutInM < 9.4) {\n      return 4;\n    }\n    if (this.boardData.sidecutInM <= 10) {\n      return 5;\n    }\n    return 6;\n  }\n\n  private calculateRightOverhang() {\n    const widthAtInsert = this.calculateWidthAtInserts(this.boardData.stance / 2 + this.boardData.setBackInInches * 2.54 - this.boardData.sidecutSetbackInInches * 2.54);\n    const absWidthAtInsert = this.calculateAbsBoardWidthAtInserts(this.boardData.rightAngle, widthAtInsert);\n    const offset = this.calculateAbsBoardWidthAtInserts(this.boardData.rightAngle, 1);\n    this.currentRightHeelOverhang = Math.floor(((this.boardData.bootSize - absWidthAtInsert) / 2 - this.boardData.bindingOffsetRight * offset) * 100) / 100;\n    this.currentRightToeOverhang = Math.floor(((this.boardData.bootSize - absWidthAtInsert) / 2 + this.boardData.bindingOffsetRight * offset) * 100) / 100;\n  }\n\n  private calculateLeftOverhang() {\n    const widthAtInsert = this.calculateWidthAtInserts(this.boardData.stance / 2 - this.boardData.setBackInInches * 2.54 + this.boardData.sidecutSetbackInInches * 2.54);\n    const absWidthAtInsert = this.calculateAbsBoardWidthAtInserts(this.boardData.leftAngle, widthAtInsert);\n    const offset = this.calculateAbsBoardWidthAtInserts(this.boardData.leftAngle, 1);\n    this.currentLeftToeOverhang = Math.floor(((this.boardData.bootSize - absWidthAtInsert) / 2 + this.boardData.bindingOffsetLeft * offset) * 100) / 100;\n    this.currentLeftHeelOverhang = Math.floor(((this.boardData.bootSize - absWidthAtInsert) / 2 - this.boardData.bindingOffsetLeft * offset) * 100) / 100;\n  }\n\n  private calculateWidthAtInserts(stancePlacement) {\n    const hypoInCm = this.boardData.sidecutInM * 100;\n    const kat1 = stancePlacement;\n    const hypoPow = Math.pow(hypoInCm, 2);\n    const kat1Pow = Math.pow(kat1, 2);\n    const kat2Pow = hypoPow - kat1Pow;\n    const kat2 = Math.sqrt(kat2Pow);\n    return this.boardData.waist + (hypoInCm - kat2) * 2;\n  }\n\n  private calculateAbsBoardWidthAtInserts(angleValue: number, widthAtInserts: number) {\n    /**\n     * right triangle with\n     * a = widthAtInserts\n     * angle a/b = 90Â°\n     * angle a/c = angleValue\n     */\n    let alpha;\n    let beta;\n    const gamma = 90;\n    if (angleValue >= 0) {\n      beta = angleValue;\n    } else {\n      beta = -angleValue;\n    }\n    const a = widthAtInserts;\n    if (beta === 0 || a === 0) {\n      return a;\n    } else {\n      alpha = 90 - beta;\n    }\n    const c = a * Math.sin(gamma * Math.PI / 180) / Math.sin(alpha * Math.PI / 180);\n    return c;\n  }\n}\n","export class BoardDataDto {\n  public length: number;\n  public waist: number;\n  public sidecutInM: number;\n  public sidecutSetbackInInches: number;\n  public stance: number;\n  public rightAngle: number;\n  public leftAngle: number;\n  public bootSize: number;\n  public bindingOffsetRight: number;\n  public bindingOffsetLeft: number;\n  public setBackInInches: number;\n}\n","import { Component, OnInit } from '@angular/core';\nimport {BoardDataDto} from '../classes/board-data-dto';\n\n@Component({\n  selector: 'app-board-panel',\n  templateUrl: './board-panel.component.html',\n  styleUrls: ['./board-panel.component.css']\n})\nexport class BoardPanelComponent implements OnInit {\n\n  public boardData: BoardDataDto;\n\n  constructor() {\n    this.boardData = new BoardDataDto();\n    this.boardData.length = 155;\n    this.boardData.waist = 25.5;\n    this.boardData.sidecutInM = 7.6;\n    this.boardData.sidecutSetbackInInches = 0;\n    this.boardData.stance = 53;\n    this.boardData.leftAngle = 15;\n    this.boardData.rightAngle = -6;\n    this.boardData.bootSize = 30.5;\n    this.boardData.bindingOffsetLeft = 0;\n    this.boardData.bindingOffsetRight = 0;\n    this.boardData.setBackInInches = 1;\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\n\n@Component({\n  selector: 'app-binding',\n  templateUrl: './binding.component.html',\n  styleUrls: ['./binding.component.css']\n})\nexport class BindingComponent implements OnInit, OnChanges {\n  @Input()\n  public angle: number;\n\n  @Input()\n  public bootSize: number;\n\n  @Input()\n  public boardWidth: number;\n\n  @Input()\n  public bindingOffset: number;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n  }\n\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {BoardDataDto} from '../classes/board-data-dto';\n\n@Component({\n  selector: 'app-overhang-panel',\n  templateUrl: './overhang-panel.component.html',\n  styleUrls: ['./overhang-panel.component.css']\n})\nexport class OverhangPanelComponent implements OnInit {\n\n  @Input()\n  public boardData: BoardDataDto;\n\n  @Input()\n  public leftOverhang: number;\n\n  @Input()\n  public rightOverhang: number;\n\n  @Input()\n  public placement: string;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n  public getWarningLevel(overhang: number) {\n    if (overhang < 1.75) {\n      return '#03d800';\n    }\n    if (overhang < 2) {\n      return '#94ec00';\n    }\n    if (overhang < 2.25) {\n      return '#dddd00';\n    }\n    if (overhang < 2.5) {\n      return '#ed8649';\n    }\n    return '#da0000';\n  }\n\n  public getWarningWidth(overhang: number) {\n    if (overhang < 2) {\n      return 2;\n    }\n    if (overhang < 2.5) {\n      return 3;\n    }\n    return 4;\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {BoardDataDto} from '../classes/board-data-dto';\n\n@Component({\n  selector: 'app-data-input-form',\n  templateUrl: './data-input-form.component.html',\n  styleUrls: ['./data-input-form.component.css']\n})\nexport class DataInputFormComponent implements OnInit {\n\n  @Input()\n  public boardData: BoardDataDto;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { SnowboardSetupSimulatorComponent } from './snowboard-setup-simulator.component';\nimport {FormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {BoardComponent} from './board/board.component';\nimport {BoardPanelComponent} from './board-panel/board-panel.component';\nimport {BindingComponent} from './binding/binding.component';\nimport {OverhangPanelComponent} from './overhang-panel/overhang-panel.component';\nimport {DataInputFormComponent} from './data-input-form/data-input-form.component';\n\n@NgModule({\n  declarations: [\n    BoardComponent,\n    BoardPanelComponent,\n    BindingComponent,\n    OverhangPanelComponent,\n    DataInputFormComponent,\n    SnowboardSetupSimulatorComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    CommonModule\n  ],\n  exports: [SnowboardSetupSimulatorComponent]\n})\nexport class SnowboardSetupSimulatorModule { }\n"]}