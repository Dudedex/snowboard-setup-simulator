{"version":3,"sources":["ng://snowboard-setup-simulator/lib/snowboard-setup-simulator.service.ts","ng://snowboard-setup-simulator/lib/translation/de.ts","ng://snowboard-setup-simulator/lib/translation/en.ts","ng://snowboard-setup-simulator/lib/translation/translation-provider.ts","ng://snowboard-setup-simulator/lib/snowboard-setup-simulator.component.ts","ng://snowboard-setup-simulator/lib/board/board.component.ts","ng://snowboard-setup-simulator/lib/classes/board-data-dto.ts","ng://snowboard-setup-simulator/lib/board-panel/board-panel.component.ts","ng://snowboard-setup-simulator/lib/binding/binding.component.ts","ng://snowboard-setup-simulator/lib/overhang-panel/overhang-panel.component.ts","ng://snowboard-setup-simulator/lib/data-input-form/data-input-form.component.ts","ng://snowboard-setup-simulator/lib/snowboard-setup-simulator.module.ts"],"names":["SnowboardSetupSimulatorService","Injectable","args","providedIn","De","translation","page.snowboardSetup.toeOverhang","page.snowboardSetup.heelOverhang","page.snowboardSetup.length","page.snowboardSetup.waist","page.snowboardSetup.sidecutRadius","page.snowboardSetup.sidecutSetback","page.snowboardSetup.stanceSetback","page.snowboardSetup.stanceWidth","page.snowboardSetup.angleLeft","page.snowboardSetup.angleRight","page.snowboardSetup.bootProfile","page.snowboardSetup.bindingOffsetLeft","page.snowboardSetup.bindingOffsetRight","En","TranslationProvider","setupTranslationProvider","translate","defaultLocale","setTranslation","setDefaultLang","SnowboardSetupSimulatorComponent","this","prototype","ngOnInit","translationSetup","ngOnChanges","changes","locale","Component","selector","template","TranslateService","Input","BoardComponent","cmInPixelFactor","inchesInCm","mInPixelFactor","ngDoCheck","boardData","calculateRightOverhang","calculateLeftOverhang","getContainerHeight","$","height","getBoardClass","markPart","getWaistClass","getSidecutClass","indexOf","isBindingActive","binding","console","log","getSidecutMargin","sidecutInM","widthAtInsert","calculateWidthAtInserts","stance","setBackInInches","sidecutSetbackInInches","absWidthAtInsert","calculateAbsBoardWidthAtInserts","rightAngle","offset","currentRightHeelOverhang","Math","floor","bootSize","bindingOffsetRight","currentRightToeOverhang","leftAngle","currentLeftToeOverhang","bindingOffsetLeft","currentLeftHeelOverhang","stancePlacement","hypoInCm","kat1","kat2Pow","pow","kat2","sqrt","waist","angleValue","widthAtInserts","alpha","beta","sin","PI","BoardDataDto","BoardPanelComponent","length","BindingComponent","getFootbedClass","isActive","activeType","getBidingClass","OverhangPanelComponent","getWarningLevel","overhang","getWarningWidth","DataInputFormComponent","setMarkPart","type","common","registerLocaleData","localeDe","localeEn","SnowboardSetupSimulatorModule","NgModule","declarations","imports","BrowserModule","FormsModule","CommonModule","TranslateModule","forRoot","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SnowboardSetupSimulatorService {\r\n\r\n  constructor() { }\r\n}\r\n","export class De {\r\n  public static translation() {\r\n    return {\r\n      // Translation Keys\r\n      'page.snowboardSetup.toeOverhang': 'ZehenÃ¼berstand',\r\n      'page.snowboardSetup.heelOverhang': 'FersenÃ¼berstand',\r\n\r\n      'page.snowboardSetup.length': 'LÃ¤nge (in cm)',\r\n      'page.snowboardSetup.waist': 'Tailie (in cm)',\r\n      'page.snowboardSetup.sidecutRadius': 'Sidecut Radius (in m)',\r\n      'page.snowboardSetup.sidecutSetback': 'Sidecut RÃ¼ckversÃ¤tzung (in inches)',\r\n      'page.snowboardSetup.stanceSetback': 'Haltung RÃ¼ckversÃ¤tzung (in inches)',\r\n      'page.snowboardSetup.stanceWidth': 'Standbreite (in cm)',\r\n      'page.snowboardSetup.angleLeft': 'Bindungswinkel Links (in Â°)',\r\n      'page.snowboardSetup.angleRight': 'Bindungswinkel Rechts (in Â°)',\r\n      'page.snowboardSetup.bootProfile': 'SchuhprofilgrÃ¶Ãe (in cm)',\r\n      'page.snowboardSetup.bindingOffsetLeft': 'Bindungsversatz Links (in cm)',\r\n      'page.snowboardSetup.bindingOffsetRight': 'Bindungsversatz Rechts (in cm)',\r\n    };\r\n  }\r\n}\r\n","export class En {\r\n  public static translation() {\r\n    return {\r\n      // Translation Keys\r\n      'page.snowboardSetup.toeOverhang': 'Toe overhang',\r\n      'page.snowboardSetup.heelOverhang': 'Heel overhang',\r\n\r\n      'page.snowboardSetup.length': 'Length (in cm)',\r\n      'page.snowboardSetup.waist': 'Waist (in cm)',\r\n      'page.snowboardSetup.sidecutRadius': 'Sidecut radius (in m)',\r\n      'page.snowboardSetup.sidecutSetback': 'Sidecut Setback (in inches)',\r\n      'page.snowboardSetup.stanceSetback': 'Stance Setback (in inches)',\r\n      'page.snowboardSetup.stanceWidth': 'Stance width (in cm)',\r\n      'page.snowboardSetup.angleLeft': 'Angle left foot (in Â°)',\r\n      'page.snowboardSetup.angleRight': 'Angle right foot (in Â°)',\r\n      'page.snowboardSetup.bootProfile': 'Boot Profile Size(in cm)',\r\n      'page.snowboardSetup.bindingOffsetLeft': 'Binding offset left(in cm)',\r\n      'page.snowboardSetup.bindingOffsetRight': 'Binding offset right(in cm)',\r\n    };\r\n  }\r\n}\r\n","import {TranslateService} from '@ngx-translate/core';\r\nimport {De} from './de';\r\nimport {En} from './en';\r\n\r\nexport class TranslationProvider {\r\n  public static setupTranslationProvider(translate: TranslateService, defaultLocale?: string) {\r\n    translate.setTranslation('de', De.translation(), true);\r\n    translate.setTranslation('en', En.translation(), true);\r\n    if (defaultLocale) {\r\n      translate.setDefaultLang(defaultLocale);\r\n    } else {\r\n      translate.setDefaultLang('de');\r\n    }\r\n  }\r\n}\r\n","import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\r\nimport {TranslateService} from '@ngx-translate/core';\r\nimport {TranslationProvider} from './translation/translation-provider';\r\n\r\n@Component({\r\n  selector: 'lib-snowboard-setup-simulator',\r\n  template: `\r\n    <app-board-panel></app-board-panel>\r\n  `,\r\n  styles: []\r\n})\r\nexport class SnowboardSetupSimulatorComponent implements OnInit, OnChanges {\r\n  @Input()\r\n  public locale: string;\r\n\r\n  constructor( private translate: TranslateService) {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.translationSetup();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.translationSetup();\r\n  }\r\n\r\n  private translationSetup() {\r\n    TranslationProvider.setupTranslationProvider(this.translate, this.locale);\r\n  }\r\n\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {BoardDataDto} from '../classes/board-data-dto';\r\nimport {DoCheck} from '@angular/core/src/metadata/lifecycle_hooks';\r\n\r\ndeclare function $(element: string);\r\n\r\n@Component({\r\n  selector: 'app-board',\r\n  templateUrl: './board.component.html',\r\n  styleUrls: ['./board.component.css']\r\n})\r\nexport class BoardComponent implements OnInit, DoCheck {\r\n\r\n  @Input()\r\n  public boardData: BoardDataDto;\r\n\r\n  public cmInPixelFactor = 2;\r\n  public inchesInCm = 2.54;\r\n  public mInPixelFactor = 200;\r\n\r\n  public currentRightToeOverhang: number;\r\n  public currentLeftToeOverhang: number;\r\n  public currentRightHeelOverhang: number;\r\n  public currentLeftHeelOverhang: number;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.boardData) {\r\n      this.calculateRightOverhang();\r\n      this.calculateLeftOverhang();\r\n    }\r\n  }\r\n\r\n  public getContainerHeight() {\r\n    // Container height minus border width\r\n    if ($('.board-container')) {\r\n      return $('.board-container').height() - 2;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  public getBoardClass() {\r\n    if (this.boardData.markPart === 'length') {\r\n      return 'red';\r\n    }\r\n    return '';\r\n  }\r\n\r\n  public getWaistClass() {\r\n    if (this.boardData.markPart === 'waist') {\r\n      return 'red';\r\n    }\r\n    return '';\r\n  }\r\n\r\n  public getSidecutClass() {\r\n    if (['sidecut', 'length'].indexOf(this.boardData.markPart) >= 0 ) {\r\n      return 'red';\r\n    }\r\n    return '';\r\n  }\r\n\r\n  public isBindingActive(binding: string) {\r\n    if (['bindings', 'boots'].indexOf(this.boardData.markPart) >= 0) {\r\n      return true;\r\n    }\r\n\r\n    if (binding === 'right' && ['rightBinding', 'bindingsBootPlateRight'].indexOf(this.boardData.markPart) >= 0) {\r\n      console.log('right active');\r\n      return true;\r\n    }\r\n\r\n    if (binding === 'left' && ['leftBinding', 'bindingsBootPlateLeft'].indexOf(this.boardData.markPart) >= 0) {\r\n      console.log('left active');\r\n      return true;\r\n    }\r\n  }\r\n\r\n  public getSidecutMargin() {\r\n    if (this.boardData.sidecutInM < 6.3) {\r\n      return -2;\r\n    }\r\n    if (this.boardData.sidecutInM < 6.7) {\r\n      return -1;\r\n    }\r\n    if (this.boardData.sidecutInM < 7.2) {\r\n      return 0;\r\n    }\r\n    if (this.boardData.sidecutInM < 7.6) {\r\n      return 1;\r\n    }\r\n    if (this.boardData.sidecutInM < 8.5) {\r\n      return 2;\r\n    }\r\n    if (this.boardData.sidecutInM < 9) {\r\n      return 3;\r\n    }\r\n    if (this.boardData.sidecutInM < 9.4) {\r\n      return 4;\r\n    }\r\n    if (this.boardData.sidecutInM <= 10) {\r\n      return 5;\r\n    }\r\n    return 6;\r\n  }\r\n\r\n  private calculateRightOverhang() {\r\n    const widthAtInsert = this.calculateWidthAtInserts(this.boardData.stance / 2 + this.boardData.setBackInInches * 2.54 - this.boardData.sidecutSetbackInInches * 2.54);\r\n    const absWidthAtInsert = this.calculateAbsBoardWidthAtInserts(this.boardData.rightAngle, widthAtInsert);\r\n    const offset = this.calculateAbsBoardWidthAtInserts(this.boardData.rightAngle, 1);\r\n    this.currentRightHeelOverhang = Math.floor(((this.boardData.bootSize - absWidthAtInsert) / 2 - this.boardData.bindingOffsetRight * offset) * 100) / 100;\r\n    this.currentRightToeOverhang = Math.floor(((this.boardData.bootSize - absWidthAtInsert) / 2 + this.boardData.bindingOffsetRight * offset) * 100) / 100;\r\n  }\r\n\r\n  private calculateLeftOverhang() {\r\n    const widthAtInsert = this.calculateWidthAtInserts(this.boardData.stance / 2 - this.boardData.setBackInInches * 2.54 + this.boardData.sidecutSetbackInInches * 2.54);\r\n    const absWidthAtInsert = this.calculateAbsBoardWidthAtInserts(this.boardData.leftAngle, widthAtInsert);\r\n    const offset = this.calculateAbsBoardWidthAtInserts(this.boardData.leftAngle, 1);\r\n    this.currentLeftToeOverhang = Math.floor(((this.boardData.bootSize - absWidthAtInsert) / 2 + this.boardData.bindingOffsetLeft * offset) * 100) / 100;\r\n    this.currentLeftHeelOverhang = Math.floor(((this.boardData.bootSize - absWidthAtInsert) / 2 - this.boardData.bindingOffsetLeft * offset) * 100) / 100;\r\n  }\r\n\r\n  private calculateWidthAtInserts(stancePlacement) {\r\n    const hypoInCm = this.boardData.sidecutInM * 100;\r\n    const kat1 = stancePlacement;\r\n    const hypoPow = Math.pow(hypoInCm, 2);\r\n    const kat1Pow = Math.pow(kat1, 2);\r\n    const kat2Pow = hypoPow - kat1Pow;\r\n    const kat2 = Math.sqrt(kat2Pow);\r\n    return this.boardData.waist + (hypoInCm - kat2) * 2;\r\n  }\r\n\r\n  private calculateAbsBoardWidthAtInserts(angleValue: number, widthAtInserts: number) {\r\n    /**\r\n     * right triangle with\r\n     * a = widthAtInserts\r\n     * angle a/b = 90Â°\r\n     * angle a/c = angleValue\r\n     */\r\n    let alpha;\r\n    let beta;\r\n    const gamma = 90;\r\n    if (angleValue >= 0) {\r\n      beta = angleValue;\r\n    } else {\r\n      beta = -angleValue;\r\n    }\r\n    const a = widthAtInserts;\r\n    if (beta === 0 || a === 0) {\r\n      return a;\r\n    } else {\r\n      alpha = 90 - beta;\r\n    }\r\n    const c = a * Math.sin(gamma * Math.PI / 180) / Math.sin(alpha * Math.PI / 180);\r\n    return c;\r\n  }\r\n}\r\n","export class BoardDataDto {\r\n  public length: number;\r\n  public waist: number;\r\n  public sidecutInM: number;\r\n  public sidecutSetbackInInches: number;\r\n  public stance: number;\r\n  public rightAngle: number;\r\n  public leftAngle: number;\r\n  public bootSize: number;\r\n  public bindingOffsetRight: number;\r\n  public bindingOffsetLeft: number;\r\n  public setBackInInches: number;\r\n\r\n  public markPart: string;\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport {BoardDataDto} from '../classes/board-data-dto';\r\n\r\n@Component({\r\n  selector: 'app-board-panel',\r\n  templateUrl: './board-panel.component.html',\r\n  styleUrls: ['./board-panel.component.css']\r\n})\r\nexport class BoardPanelComponent implements OnInit {\r\n\r\n  public boardData: BoardDataDto;\r\n\r\n  constructor() {\r\n    this.boardData = new BoardDataDto();\r\n    this.boardData.length = 155;\r\n    this.boardData.waist = 25.5;\r\n    this.boardData.sidecutInM = 7.6;\r\n    this.boardData.sidecutSetbackInInches = 0;\r\n    this.boardData.stance = 53;\r\n    this.boardData.leftAngle = 15;\r\n    this.boardData.rightAngle = -6;\r\n    this.boardData.bootSize = 30.5;\r\n    this.boardData.bindingOffsetLeft = 0;\r\n    this.boardData.bindingOffsetRight = 0;\r\n    this.boardData.setBackInInches = 1;\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-binding',\r\n  templateUrl: './binding.component.html',\r\n  styleUrls: ['./binding.component.css']\r\n})\r\nexport class BindingComponent implements OnInit, OnChanges {\r\n  @Input()\r\n  public angle: number;\r\n\r\n  @Input()\r\n  public bootSize: number;\r\n\r\n  @Input()\r\n  public boardWidth: number;\r\n\r\n  @Input()\r\n  public bindingOffset: number;\r\n\r\n  @Input()\r\n  public isActive: string;\r\n\r\n  @Input()\r\n  public activeType: string;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n  }\r\n\r\n  public getFootbedClass() {\r\n    if (this.isActive) {\r\n      if (['bindingsBootPlateLeft', 'bindingsBootPlateRight', 'boots'].indexOf(this.activeType) >= 0) {\r\n        return 'plate-active';\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n  public getBidingClass() {\r\n    if (this.isActive) {\r\n      if (['bindings', 'leftBinding', 'rightBinding', 'boots'].indexOf(this.activeType) >= 0) {\r\n        return 'binding-active';\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {BoardDataDto} from '../classes/board-data-dto';\r\n\r\n@Component({\r\n  selector: 'app-overhang-panel',\r\n  templateUrl: './overhang-panel.component.html',\r\n  styleUrls: ['./overhang-panel.component.css']\r\n})\r\nexport class OverhangPanelComponent implements OnInit {\r\n\r\n  @Input()\r\n  public boardData: BoardDataDto;\r\n\r\n  @Input()\r\n  public leftOverhang: number;\r\n\r\n  @Input()\r\n  public rightOverhang: number;\r\n\r\n  @Input()\r\n  public placement: string;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public getWarningLevel(overhang: number) {\r\n    if (overhang < 1.75) {\r\n      return '#03d800';\r\n    }\r\n    if (overhang < 2) {\r\n      return '#94ec00';\r\n    }\r\n    if (overhang < 2.25) {\r\n      return '#dddd00';\r\n    }\r\n    if (overhang < 2.5) {\r\n      return '#ed8649';\r\n    }\r\n    return '#da0000';\r\n  }\r\n\r\n  public getWarningWidth(overhang: number) {\r\n    if (overhang < 2) {\r\n      return 2;\r\n    }\r\n    if (overhang < 2.5) {\r\n      return 3;\r\n    }\r\n    return 4;\r\n  }\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {BoardDataDto} from '../classes/board-data-dto';\r\n\r\n@Component({\r\n  selector: 'app-data-input-form',\r\n  templateUrl: './data-input-form.component.html',\r\n  styleUrls: ['./data-input-form.component.css']\r\n})\r\nexport class DataInputFormComponent implements OnInit {\r\n\r\n  @Input()\r\n  public boardData: BoardDataDto;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public setMarkPart(type: string) {\r\n    this.boardData.markPart = type;\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { SnowboardSetupSimulatorComponent } from './snowboard-setup-simulator.component';\r\nimport {FormsModule} from '@angular/forms';\r\nimport {CommonModule, registerLocaleData} from '@angular/common';\r\nimport {BrowserModule} from '@angular/platform-browser';\r\nimport localeDe from '@angular/common/locales/de';\r\nimport localeEn from '@angular/common/locales/en';\r\nimport {BoardComponent} from './board/board.component';\r\nimport {BoardPanelComponent} from './board-panel/board-panel.component';\r\nimport {BindingComponent} from './binding/binding.component';\r\nimport {OverhangPanelComponent} from './overhang-panel/overhang-panel.component';\r\nimport {DataInputFormComponent} from './data-input-form/data-input-form.component';\r\nimport {TranslateModule} from '@ngx-translate/core';\r\n\r\nregisterLocaleData(localeDe);\r\nregisterLocaleData(localeEn);\r\n\r\n@NgModule({\r\n  declarations: [\r\n    BoardComponent,\r\n    BoardPanelComponent,\r\n    BindingComponent,\r\n    OverhangPanelComponent,\r\n    DataInputFormComponent,\r\n    SnowboardSetupSimulatorComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    CommonModule,\r\n    TranslateModule.forRoot()\r\n  ],\r\n  exports: [SnowboardSetupSimulatorComponent]\r\n})\r\nexport class SnowboardSetupSimulatorModule { }\r\n"]}